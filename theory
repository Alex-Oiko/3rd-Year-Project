If I can use a for loop which seems unlikely

Have one node that runs the algorithm. Store all matrices as 2D arrays in the RAM of one of the chips.

If a multiplication occurs give the double for loop to another core, which will assign each multiplication to a new core.

Have another core to do subtractions. Subtractions will work the same way as multiplications

In fact each line of the code can be done by a different processor

As in all SpiNNaker applications the result is flooded to the rest of the machine using a spike.

(If this^^ is computationally heavy, you can assign it to another node. This node will be creating nodes on the fly and assign them to cores using spikes. It will contain the source of the core that assigns the multipllications, so that when the loop finishes the data is sent correctly. Of course this will need to be executed before the double for loop)

Possibly flood the cores and store the values of the most used values. For example x(if possible)

Scalar results can be flooded through the whole system in order to prevent searching when they are needed. Or can(and should be stored in memory) and be sent every time they are needed.

	   ____	same___
	  /	a3x3   \
	 /		\	
      __/		 \ 
     /  \  		  \ 
     \__/		same
      a1x1          	a2x2



n0 weight is initially 0 and all others nodes weights are 1.
-All the other nodes except the last one send their results to n0. Since the architecture is like a neural network, it has to be added to the weight. So the weight becomes the final result. Finally, when the n0's computation is completed it too is added to the weight to produce the final result.

PSEUDOCODE
-----------
for(i=0;i<matrix.length;i++){
	for(k=0;k<matrix.length;k++){

	}
}
Alternative approach for matrix-vector multiplication
-------------------------------------------------------
As mentioned before the nodes are created before by a core(which is slow)

Each time a multiplication(say a1*x1) finished it is sent to the second node that it is supposed to go. The last node that contains the last multiplication, will then cause an interrupt, which will update the value to the main core(the one that runs the algorithm). You can probably use flags for this.



x=x+alpha*p  | 
r=r-alpha*Ap |-->these 2 operations can be done in parallel, since they can be independent from each other



	


Each element of b,A,r,p and x is loaded as a node in a task file

nodes for A look like this:

number	value	weight	row	endNode(bool)	latestresult	incomingIDs

nodes for b look like this
number value weights row elementID

nodes for x look like this:
number	value	weight 	row elementID

nodes for r look like this:
number value weight row incomingIDs


For generating r
------------------
You send(through a spike) the contents of x to the nodes of A

When doing A*x0 you can save the results to the(after you have finished) r nodes, which have as initiated values 0. Then you can reverse the sign of each value and and ssubtract b.

You send through a spike the contents of b nodes to the r nodes and save their value in the r nodes

============================================================================================================================================================

struct Value{
  signed Value;
  operator op;
}

To compute r
  --------------
x nodes sends its info to A nodes

Maybe instead of just having the x node, you have a structure that stores the operator along with the value. That might be needed for all the values that exist in the Nodes of other elements(for example x value and operator in A-nodes)

A nodes are
************
number  value   Xneeded   lastresult

x nodes are
************
number  value pValue rValue

Once the nodes of A have the result they flood the information on the result attribute and try to find r

r nodes are
************
number  value Anodes(array) or column   squareValue ApNode

In the beginning r-nodes have the value of b-nodes. The reason for that being that b nodes are not used anywhere else, so they dont need to be instantiated anywhere else. Once the addition is complete(maybe add an attribute of how many additions have been completed), you reverse the sign of the value. 

send all the r nodes to their respective p nodes

p nodes
********
number  value   rNode Anodes(array or many nodes) or column alpha alphaValue beta


Then rsold needs to be computed
********************************
number value

The square value from r nodes is sent to the rsold node. Rsold then computes the addition and now has the scalar value of it.


Maybe spike an interrupt and say that rsold is computed and the iteration can begin now.

to compute Ap
***************
the values of p are flooded to A and the multiplication is computed. Then the lastresult atribute of A is sent to Ap nodes

Ap nodes are
**************
number  value   Anodes(array or many nodes)or column  pNode   pApresult alpha  alphaAp

The addition is completed in the Ap nodes


Again issue an interrupt, which tells p-Nodes to send their values to Ap nodes

to compute alpha
******************
alpha node is
****************
node  value   rsold   alpha_denom

alpha_denom node is
**********************
node value Ap_node

The pApresult of the Ap nodes are sent here in order to do the appropriate addition. Then the value is sent to the alpha node to do the dviision


x=x+alpha*p

alpha is sent to the p nodes where the multiplication with the value is done and added to the alphaValue attribute. Then the p nodes send their alphaValue to the x nodes and after the addition is completed xÂ´s value is updated


same with r

rsnew node
******
The newly updated squareValue of rNodes is sent here so the addition can be completed and produce rsnew. Also do the check to see if sqrt(rsnew)<1e-10, in order to see if you continue the iteration


rsnew/rsold node
********************
number value  rsnew   rsold

rsnew and rsold are sent here and the division happens


rsnew/rsold node are sent throughout the p nodes.

The p-nodes handle the multiplication of the values of each node. Then the r-nodes re-send their new updated information to the p nodes and the addition of the value of the p node with the incoming r-node value is done.

The iteration finishes with sending the rsnew value to the rsold node and changing it, so as to begin the next iteration
	
